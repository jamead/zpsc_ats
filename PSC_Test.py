import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
from reportlab.lib.pagesizes import letter, inch
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Image, PageBreak, Spacer
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
import os
import subprocess  # Import subprocess module
import epics
from epics import caget,caput
import time

from reportlab.platypus import Table, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
from reportlab.lib.units import inch

from reportlab.platypus import Table, Paragraph
from reportlab.lib.styles import getSampleStyleSheet

styles = getSampleStyleSheet()

props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)

# Helper function to return color-coded result
def color_result(result):
    if result == "PASS":
        return Paragraph("<b><font color='green'>PASS</font></b>", styles['Normal'])
    else:
        return Paragraph("<b><font color='red'>FAIL</font></b>", styles['Normal'])

###############################################################################################
# Setup Parameters for ACMI Calibration Report (Adjust these Parameters as Needed)
###############################################################################################

Title = 'Automated PSC Test Report'
CalDate = '8/18/2025'
ReportDate = '8/25/2025'
Engineer = 'Thomas Chiesa'
Assistant = 'Anthony Caracappa'

ScopeMAN = 'Tektronix'
ScopeMOD = 'MSO64B'
ScopeSN =  'B027138'
ScopeCAL = '12/30/2025'

PulserMAN = 'HP'
PulserMOD = '8114A'
PulserSN = '3330 G 00691'
PulserCAL = '*See Note 1'

TimerMAN = 'SRS'
TimerMOD = 'DG645'
TimerSN = '003099'
TimerCAL = '4/23/2026'

AnalyzerMAN = 'Rohde & Schwarz'
AnalyzerMOD = 'FWS50'
AnalyzerSN = '101986'
AnalyzerCAL = '10/30/2025'

DmmMAN = 'Keithley'
DmmMOD = '2100'
DmmSN = '8020357'
DmmCAL = '3/20/2025'

AttenMAN = 'Minicircuits'
AttenMOD = 'VAT-6+'
Atten20 = '-6.0304dB'
Atten50 = '-5.9892dB'
Atten100 = '-6.0058dB'

SplitMAN = 'Minicircuits'
SplitMOD = 'ZFSC-2-1W-S+'

# File Names from the Data Collection Scripts:

fratio = 'LTBRatio.raw'        #File Generated during the ICT Ratio Measurements
facmi = 'LTBacmi.raw'          #File Generated during the ACMI Calibration Measurements
fnegative = 'LTBneg.raw'       #File Generated during the Inverted Polarity Measurements
fverify = 'LTBverify2.txt'      #File Generated during the Verification Measurements
freport = "PSCTest.pdf"        #File Generated by this script for the Calibration Report



# Closeout Values:

PLCupdated = 'DONE'
PLCsignature = 'DONE'
PLCSSValue = 'F6A8B43D'
PLCrun = 'DONE'
ACMIbypass = 'DONE'
ECNrequest = 'DONE'
ProcStatus = 'COMPLETED'

if os.path.exists(freport):
    x = input("\n\nFile Exists! Make sure this file is not in use then\nEnter '1' to overwrite or '0' to abort: ")
    if int(x)==1:
        try:
            os.rename(freport,freport)
            print("Available!")
        except OSError as e:
            print("****** ERROR ******\n\n"+freport+" is in use. Please close the file and try again.")
            exit()
    else:
        exit()

doc = SimpleDocTemplate(freport, pagesize=letter, rightMargin=30,leftMargin=30, topMargin=30,bottomMargin=18)
elements = []

tdata = []
tdata.append([Title])
tdata.append(["Procedure Performed on "+CalDate+" by "+Engineer+" and "+Assistant])
tdata.append(["Analysis Performed on "+ReportDate+" by "+Engineer])

ta=Table(tdata,6*inch,[0.4*inch,0.22*inch,0.22*inch],style=[
                ('BACKGROUND',(0,0),(0,0),colors.lemonchiffon),
                ('VALIGN',(0,0),(0,0),'MIDDLE'),
                ('LINEABOVE',(0,1),(0,1),2,colors.black),
                ('FONTSIZE', (0,0), (0,0), 14),
                ('GRID',(0,0),(-1,-1),1,colors.black),
                ('BOX',(0,0),(-1,-1),2,colors.black),
                ])

elements.append(ta)

##############################################################################################
# Test DAC
##############################################################################################
# Update these as needed
lab_number = {2}  
commanded_value = 1.000
tolerance = 0.1

# Zero DACs Initially...
epics.caput("lab{2}Chan1:DAC_SetPt-SP", 0.0)
epics.caput("lab{2}Chan2:DAC_SetPt-SP", 0.0)
epics.caput("lab{2}Chan3:DAC_SetPt-SP", 0.0)
epics.caput("lab{2}Chan4:DAC_SetPt-SP", 0.0)
time.sleep(3)

# Array to store DAC readback values
dac_rdbck_chan = []

for chan_num in range(1, 5):  # Chan1 to Chan4
    pv_base = f"lab{lab_number}Chan{chan_num}"
    pv_name = f"{pv_base}:DAC_SetPt-SP"

    # Set the DAC
    caput(pv_name, commanded_value)
    time.sleep(3)
    
    # Get the DAC readback value of the PV
    pv_base = f"lab{lab_number}Chan{chan_num}"
    pv_name = f"{pv_base}:DAC-I"
    dac_rdbck = caget(pv_name)
    print(f"{dac_rdbck:.6f}")
    
    # Store the result in the list
    dac_rdbck_chan.append(dac_rdbck)
    print("dac_rdbck:",dac_rdbck_chan[chan_num-1])

    # Check if value was successfully retrieved
    if dac_rdbck is None:
        print(f"Failed to read PV: {pv_name}")
        continue

    # Print the result to the terminal with 5 decimal places
    print(f'The current value of PV "{pv_name}" is: {dac_rdbck:.6f}')

    # Check if the readback value is within tolerance
    if abs(dac_rdbck - commanded_value) <= tolerance:
        print(f"Readback OK: {dac_rdbck:.6f} is within ±{tolerance} of {commanded_value:.6f}")
    else:
        print(f"FAILURE !!! : Readback {dac_rdbck:.5f} is OUTSIDE ±{tolerance} of {commanded_value:.6f}")




# Run Joe's 10 Hz Data Collection Script to take DCCT ppm measurements
subprocess.run(['python3', 'psc_read_sa_all_chans.py', 'lab{2}' , '10', 'data.txt' ])  # Run the psc_read_sa.py script to collect 10 Hz data



# DAC Readback Check Report Table
tdata = []
tdata.append(["DAC Readback Measurements","",""])


PSpass = 0

# Loop through channels
for i in range(4):
    channel_num = i + 1
    readback = dac_rdbck_chan[i]

    # Add channel info row
    tdata.append([f"Channel {channel_num}\n1.0 Amp Command", "Readback Value:", f"{readback:.6f}"])

    # Check tolerance
    if (commanded_value - tolerance) <= readback <= (commanded_value + tolerance):
        result = "PASS"
        PSpass += 1
    else:
        result = "FAIL"

    # Add result row with color formatting
    tdata.append(["", "Within tolerance?", color_result(result)])




tps = Table(tdata, 2*inch, 0.22*inch, style=[
    ('SPAN',(0,0),(2,0)),
    ('BACKGROUND',(0,0),(2,0),colors.lemonchiffon),
    ('LINEABOVE',(0,1),(2,1),2,colors.black),
    ('SPAN',(0,1),(0,2)),
    ('LINEABOVE',(0,3),(2,3),2,colors.black),
    ('SPAN',(0,3),(0,4)),
    ('LINEABOVE',(0,5),(2,5),2,colors.black),
    ('SPAN',(0,5),(0,6)),
    ('LINEABOVE',(0,7),(2,7),2,colors.black),
    ('SPAN',(0,7),(0,8)),
    # REMOVE OR COMMENT OUT styles for rows beyond index 8
    # ('LINEABOVE',(0,9),(2,9),2,colors.black),
    # ('SPAN',(0,9),(0,10)),
    # ('LINEABOVE',(0,11),(2,11),2,colors.black),
    # ('SPAN',(0,11),(2,11)),
    # ('LINEABOVE',(0,12),(2,12),2,colors.black),
    # ('SPAN',(0,12),(0,15)),
    ('GRID',(0,0),(-1,-1),1,colors.black),
    ('BOX',(0,0),(-1,-1),2,colors.black),
    ('BACKGROUND',(0,1),(1,2),colors.lemonchiffon),
])

elements.append(Spacer(width=1,height=0.1*inch))
elements.append(tps)
elements.append(PageBreak())



###############################################################################################
# EVR Timestamp Test
###############################################################################################


styles = getSampleStyleSheet()


tdata = []
tdata.append(["EVR Monotonic TimeStamp Test", "", ""])

def read_pv_multiple_times(pv_name, num_reads=10, delay=1.0):
    pv_values = []
    for i in range(num_reads):
        value = caget(pv_name)
        print(f"Read {i+1}: {value}")
        pv_values.append(value)
        time.sleep(delay)
    return pv_values

def check_pv_increment(pv_values, max_step=10):
    for i in range(1, len(pv_values)):
        diff = pv_values[i] - pv_values[i - 1]
        if diff < 0 or diff > max_step:
            print(f"FAIL at index {i}: prev={pv_values[i-1]}, current={pv_values[i]}")
            return 'FAIL'
    return 'PASS'

# Replace with actual lab number if needed
lab_number = 2
#pv_name = f"lab{{lab_number}}TS-S-I"
pv_name = "lab{2}TS-S-I"

# Read PV values
pv_values = read_pv_multiple_times(pv_name, num_reads=10, delay=1.0)

# Evaluate result
result = check_pv_increment(pv_values)
print(f"Result: {result}")

# Add PV values and result to table
pv_display = f"{pv_values[0]:.0f}, {pv_values[1]:.0f}, {pv_values[3]:.0f}"
tdata.append(["EVR Link Test", "Readback Values:", pv_display])
tdata.append(["", "EVR Working?", color_result(result)])

# Create EVR Table
tps_evr = Table(tdata, 2*inch, 0.22*inch, style=[
    ('SPAN', (0, 0), (2, 0)),
    ('BACKGROUND', (0, 0), (2, 0), colors.lemonchiffon),
    ('LINEABOVE', (0, 1), (2, 1), 2, colors.black),
    ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ('BOX', (0, 0), (-1, -1), 2, colors.black),
    ('BACKGROUND', (0, 1), (1, len(tdata)-1), colors.lemonchiffon),
])

elements.append(Spacer(width=1, height=0.1*inch))
elements.append(tps_evr)
elements.append(PageBreak())




# Build the PDF Output file
doc.build(elements)

